import Foundation

struct PassObject: Codable, Identifiable, Equatable, Hashable {
    var id: UUID
    var passName: String
    var passType: PassType
    var passIcon: Data
    var identificationString: String
    var barcodeString: String
    var barcodeType: BarcodeType
    var stripImage: Data // PNG data for all passes that use the strip image (may be a barcode, picture, etc)
    var qrCodeString: String
    var qrCodeCorrectionLevel: QrCodeCorrectionLevel
    var noteString: String
    var name: String
    var title: String
    var businessName: String
    var phoneNumber: String
    var email: String
    var pictureData: Data
    var foregroundColor: UInt
    var backgroundColor: UInt
    var textColor: UInt
    var description: String
}

extension PassObject {
    init() {
        id = UUID()
        passName = ""
        passType = PassType.barcodePass
        passIcon = (try? Data(contentsOf: Bundle.main.url(forResource: "DefaultPassIcon", withExtension: "png") ?? URL(fileURLWithPath: ""))) ?? Data()
        identificationString = ""
        barcodeString = ""
        barcodeType = BarcodeType.code128
        stripImage = Data()
        qrCodeString = ""
        qrCodeCorrectionLevel = QrCodeCorrectionLevel.medium
        noteString = ""
        name = ""
        title = ""
        businessName = ""
        phoneNumber = ""
        email = ""
        pictureData = Data()
        foregroundColor = 0x000000
        backgroundColor = 0xFFFFFF
        textColor = 0x000000
        description = "A Wallet Pass generated by PassKeepr"
    }
}

enum PassType: Int, Codable, Identifiable, CaseIterable {
    case identificationPass, barcodePass, qrCodePass, notePass, businessCardPass, picturePass
    var id: Self { self }
}

enum QrCodeCorrectionLevel: Codable, CustomStringConvertible, CaseIterable {
    case low
    case medium
    case quartile
    case high

    var description: String {
        switch self {
        case .low: return "L"
        case .medium: return "M"
        case .quartile: return "Q"
        case .high: return "H"
        }
    }
}

enum BarcodeType: Codable, CustomStringConvertible, CaseIterable {
    case code128
    case code93
    case code39
    case upce

    var description: String {
        switch self {
        case .code128: return "Code 128"
        case .code93: return "Code 93"
        case .code39: return "Code 39"
        case .upce: return "UPC-E"
        }
    }
}
